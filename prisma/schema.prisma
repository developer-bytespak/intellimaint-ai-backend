// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

// ============================================
// 1. USERS & AUTHENTICATION
// ============================================

enum UserRole {
  civilian
  military
  student
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id               String    @id @default(uuid()) @db.Uuid
  email            String    @unique @db.VarChar(255)
  emailVerified    Boolean   @default(false) @map("email_verified")
  passwordHash     String?   @map("password_hash") @db.VarChar(255)
  firstName        String?   @map("first_name") @db.VarChar(255)
  lastName         String?   @map("last_name") @db.VarChar(255)
  company          String?   @db.VarChar(255)
  role             UserRole
  profileImageUrl  String?   @map("profile_image_url") @db.Text
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  lastLoginAt      DateTime? @map("last_login_at") @db.Timestamp(6)
  status           UserStatus @default(ACTIVE)

  // Relations
  oauthProviders   OAuthProvider[]
  otps             OTP[]
  sessions         Session[]
  chatSessions     ChatSession[]
  subscriptions    Subscription[]
  userSettings     UserSettings?

  @@map("users")
}

enum OAuthProviderType {
  google
  apple
}

model OAuthProvider {
  id              String            @id @default(uuid()) @db.Uuid
  userId          String            @map("user_id") @db.Uuid
  provider        OAuthProviderType
  providerUserId  String            @map("provider_user_id") @db.VarChar(255)
  refreshToken    String?           @map("refresh_token") @db.Text
  tokenExpiresAt  DateTime?         @map("token_expires_at") @db.Timestamp(6)
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("oauth_providers")
}

model OTP {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  code      String   @db.VarChar(6)
  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp")
}

model Session {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  token      String   @unique @db.VarChar(255)
  deviceInfo Json?    @map("device_info") @db.JsonB
  ipAddress  String?  @map("ip_address") @db.Inet
  expiresAt  DateTime @map("expires_at") @db.Timestamp(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// ============================================
// 2. EQUIPMENT & TAXONOMY
// ============================================

model EquipmentFamily {
  id          String            @id @default(uuid()) @db.Uuid
  name        String            @db.VarChar(255)
  description String?           @db.Text
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  models      EquipmentModel[]

  @@map("equipment_families")
}

model EquipmentModel {
  id           String          @id @default(uuid()) @db.Uuid
  familyId     String          @map("family_id") @db.Uuid
  manufacturer String?         @db.VarChar(255)
  modelNumber  String?         @map("model_number") @db.VarChar(255)
  modelName    String?         @map("model_name") @db.VarChar(255)
  description  String?         @db.Text
  imageUrls    Json?           @map("image_urls") @db.JsonB
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  family           EquipmentFamily    @relation(fields: [familyId], references: [id], onDelete: Cascade)
  knowledgeSources KnowledgeSource[]
  imageAnalyses    ImageAnalysis[]

  @@map("equipment_models")
}

// ============================================
// 3. KNOWLEDGE BASE & RAG
// ============================================

model KnowledgeSource {
  id          String      @id @default(uuid()) @db.Uuid
  title       String      @db.VarChar(255)
  sourceType  String      @map("source_type") @db.VarChar(50)
  rawContent  String      @map("raw_content") @db.Text
  modelId     String?     @map("model_id") @db.Uuid
  wordCount   Int?        @map("word_count")
  metadata    Json?       @db.JsonB
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  model       EquipmentModel?   @relation(fields: [modelId], references: [id], onDelete: SetNull)
  chunks      KnowledgeChunk[]

  @@map("knowledge_sources")
}

model KnowledgeChunk {
  id         String   @id @default(uuid()) @db.Uuid
  sourceId   String   @map("source_id") @db.Uuid
  chunkIndex Int      @map("chunk_index")
  content    String   @db.Text
  heading    String?  @db.Text
  embedding  Unsupported("vector(1536)")
  tokenCount Int?     @map("token_count")
  metadata   Json?    @db.JsonB
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  source     KnowledgeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("knowledge_chunks")
}

// ============================================
// 4. CHAT & CONVERSATIONS
// ============================================

enum ChatSessionStatus {
  active
  archived
  deleted
}

model ChatSession {
  id               String            @id @default(uuid()) @db.Uuid
  userId           String            @map("user_id") @db.Uuid
  title            String?           @db.VarChar(500)
  equipmentContext Int[]             @map("equipment_context")
  contextSummary   String?           @map("context_summary") @db.Text
  status           ChatSessionStatus @default(active)
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         ChatMessage[]

  @@map("chat_sessions")
}

enum MessageRole {
  user
  system
}

model ChatMessage {
  id             String              @id @default(uuid()) @db.Uuid
  sessionId      String              @map("session_id") @db.Uuid
  role           MessageRole
  userPrompt     String?             @map("user_prompt") @db.Text
  llmOutput      Json?               @map("llm_output") @db.JsonB
  tokenCount     Int?                @map("token_count")
  feedbackRating Int?                @map("feedback_rating")
  createdAt      DateTime            @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  session        ChatSession         @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attachments    MessageAttachment[]

  @@map("chat_messages")
}

enum AttachmentType {
  image
  document
}

model MessageAttachment {
  id             String         @id @default(uuid()) @db.Uuid
  messageId      String         @map("message_id") @db.Uuid
  attachmentType AttachmentType @map("attachment_type")
  fileUrl        String         @map("file_url") @db.Text
  fileName       String?        @map("file_name") @db.VarChar(500)
  metadata       Json?          @db.JsonB
  createdAt      DateTime       @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  message        ChatMessage     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  imageAnalysis  ImageAnalysis?

  @@map("message_attachments")
}

// ============================================
// 5. VISION & IMAGE ANALYSIS
// ============================================

model ImageAnalysis {
  id                 String            @id @default(uuid()) @db.Uuid
  attachmentId       String            @unique @map("attachment_id") @db.Uuid
  modelId            String?           @map("model_id") @db.Uuid
  detectedComponents Json?             @map("detected_components") @db.JsonB
  ocrResults         Json?             @map("ocr_results") @db.JsonB
  sceneDescription   Json?             @map("scene_description") @db.JsonB
  tokenCount         Int?              @map("token_count")
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  attachment         MessageAttachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  model              EquipmentModel?   @relation(fields: [modelId], references: [id], onDelete: SetNull)

  @@map("image_analysis")
}

// ============================================
// 6. SUBSCRIPTIONS & BILLING
// ============================================

enum SubscriptionStatus {
  active
  past_due
  canceled
  trialing
}

model Subscription {
  id                   String             @id @default(uuid()) @db.Uuid
  userId               String             @map("user_id") @db.Uuid
  stripeCustomerId     String?            @unique @map("stripe_customer_id") @db.VarChar(255)
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id") @db.VarChar(255)
  planName             String             @map("plan_name") @db.VarChar(100)
  status               SubscriptionStatus
  currentPeriodStart   DateTime?          @map("current_period_start") @db.Timestamp(6)
  currentPeriodEnd     DateTime?          @map("current_period_end") @db.Timestamp(6)
  createdAt            DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// ============================================
// 7. NOTIFICATIONS & SETTINGS
// ============================================

model UserSettings {
  userId             String   @id @map("user_id") @db.Uuid
  emailNotifications Boolean  @default(true) @map("email_notifications")
  theme              String   @default("light") @db.VarChar(20)
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}